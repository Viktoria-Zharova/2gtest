import { NodeIO } from '@gltf-transform/core';
import { 
    dedup, 
    instance, 
    palette, 
    flatten, 
    join, 
    weld, 
    simplify, 
    resample, 
    prune, 
    sparse, 
    textureCompress 
} from '@gltf-transform/functions';

export class ModelOptimizer {
    constructor() {
        this.io = new NodeIO();
    }

    async optimizeModel(inputBuffer, options = {}) {
        try {
            console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–∏...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ ArrayBuffer
            const document = await this.io.readBinary(new Uint8Array(inputBuffer));
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await document.transform(
                dedup(),          // —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                instance(),       // –∏–Ω—Å—Ç–∞–Ω—Å–∏–Ω–≥
                palette(),        // –ø–∞–ª–∏—Ç—Ä–∞
                flatten(),        // –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
                join(),           // –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                weld(),           // —Å–≤–∞—Ä–∫–∞ –≤–µ—Ä—à–∏–Ω
                simplify({        // —É–ø—Ä–æ—â–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
                    ratio: 0.75,  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º 75% –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                    error: 0.001
                }),
                resample(),       // —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ –∞–Ω–∏–º–∞—Ü–∏–π
                prune(),          // —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                sparse(),         // —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                textureCompress({ // —Å–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç—É—Ä
                    encoder: 'sharp',
                    targetFormat: 'webp',
                    quality: 0.8,
                    resize: [1024, 1024]
                })
            );

            console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            const optimizedBuffer = await this.io.writeBinary(document);
            return optimizedBuffer;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    measureOptimization(originalSize, optimizedSize) {
        const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
        console.log(`üìä –°–∂–∞—Ç–∏–µ: ${(originalSize / 1024 / 1024).toFixed(2)}MB ‚Üí ${(optimizedSize / 1024 / 1024).toFixed(2)}MB (${reduction}% —É–º–µ–Ω—å—à–µ–Ω–∏–µ)`);
        return reduction;
    }
}